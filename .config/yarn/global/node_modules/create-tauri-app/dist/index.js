'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var inquirer = require('inquirer');
var commander = require('commander');
var chalk = require('chalk');
var path = require('path');
var fs = require('fs');
var execa = require('execa');
var scaffe = require('scaffe');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var inquirer__default = /*#__PURE__*/_interopDefaultLegacy(inquirer);
var execa__default = /*#__PURE__*/_interopDefaultLegacy(execa);
var scaffe__default = /*#__PURE__*/_interopDefaultLegacy(scaffe);

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function emptyDir(dir) {
    if (!fs.existsSync(dir))
        return;
    for (const file of fs.readdirSync(dir)) {
        const abs = path.resolve(dir, file);
        // baseline is Node 12 so can't use rmSync :(
        if (fs.lstatSync(abs).isDirectory()) {
            emptyDir(abs);
            fs.rmdirSync(abs);
        }
        else {
            fs.unlinkSync(abs);
        }
    }
}

// Copyright 2019-2021 Tauri Programme within The Commons Conservancy
function updatePackageJson(f, cwd = process.cwd()) {
    const pkgPath = path.join(cwd, 'package.json');
    const pkg = JSON.parse(fs.readFileSync(pkgPath, 'utf8'));
    const output = f(pkg);
    fs.writeFileSync(pkgPath, JSON.stringify(output, undefined, 2));
}

// Copyright 2019-2021 Tauri Programme within The Commons Conservancy
const cra = {
    shortName: 'cra',
    descriptiveName: {
        name: 'create-react-app (https://create-react-app.dev/)',
        value: 'create-react-app'
    },
    configUpdate: ({ cfg, packageManager }) => (Object.assign(Object.assign({}, cfg), { distDir: `../build`, devPath: 'http://localhost:3000', beforeDevCommand: `${packageManager.name === 'npm' ? 'npm run' : packageManager.name} start`, beforeBuildCommand: `${packageManager.name === 'npm' ? 'npm run' : packageManager.name} build` })),
    extraNpmDevDependencies: ['cross-env'],
    extraQuestions: ({ ci }) => [
        {
            type: 'list',
            name: 'template',
            message: 'Which create-react-app template would you like to use?',
            choices: [
                { name: 'create-react-app (JavaScript)', value: 'cra.js' },
                { name: 'create-react-app (Typescript)', value: 'cra.ts' }
            ],
            default: 'cra.js',
            loop: false,
            when: !ci
        }
    ],
    preInit: ({ cwd, cfg, packageManager, answers }) => __awaiter(void 0, void 0, void 0, function* () {
        var _a;
        const template = (_a = answers === null || answers === void 0 ? void 0 : answers.template) !== null && _a !== void 0 ? _a : 'cra.js';
        yield packageManager.create('react-app', [
            cfg.appName,
            ...(template === 'cra.ts' ? ['--template', 'typescript'] : []),
            packageManager.name !== 'yarn' ? '--use-npm' : ''
        ], {
            cwd
        });
        // create-react-app doesn't support pnpm, so we remove `node_modules` and any lock files then install them again using pnpm
        if (packageManager.name === 'pnpm') {
            const npmLock = path.join(cwd, cfg.appName, 'package-lock.json');
            const yarnLock = path.join(cwd, cfg.appName, 'yarn.lock');
            const nodeModules = path.join(cwd, cfg.appName, 'node_modules');
            if (fs.existsSync(npmLock))
                fs.unlinkSync(npmLock);
            if (fs.existsSync(yarnLock))
                fs.unlinkSync(yarnLock);
            emptyDir(nodeModules);
            yield packageManager.install({ cwd: path.join(cwd, cfg.appName) });
        }
        updatePackageJson((pkg) => {
            var _a;
            return Object.assign(Object.assign({}, pkg), { scripts: Object.assign(Object.assign({}, pkg.scripts), { start: `${'cross-env BROWSER=none '}${(_a = pkg.scripts) === null || _a === void 0 ? void 0 : _a.start}` }) });
        }, path.join(cwd, cfg.appName));
    }),
    postInit: ({ packageManager, cfg }) => __awaiter(void 0, void 0, void 0, function* () {
        console.log(`
    Your installation completed.

    $ cd ${cfg.appName}
    $ ${packageManager.name === 'npm' ? 'npm run' : packageManager.name} tauri dev
    `);
        return yield Promise.resolve();
    })
};

// Copyright 2019-2021 Tauri Programme within The Commons Conservancy
const shell = (command, args, options, log = false) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        if (options === null || options === void 0 ? void 0 : options.shell) {
            const stringCommand = [command, ...(args !== null && args !== void 0 ? args : [])].join(' ');
            if (log)
                console.log(`[running(shell)]: ${stringCommand}`);
            return yield execa__default["default"](stringCommand, Object.assign({ stdio: 'inherit', cwd: process.cwd(), env: process.env }, options));
        }
        else {
            if (log)
                console.log(`[running]: ${command}`);
            return yield execa__default["default"](command, (args !== null && args !== void 0 ? args : []).filter((e) => e !== ''), Object.assign({ stdio: 'inherit', cwd: process.cwd(), env: process.env }, options));
        }
    }
    catch (error) {
        console.error('Error with command: %s', command);
        throw new Error(error);
    }
});

// Copyright 2019-2021 Tauri Programme within The Commons Conservancy
const vuecli = {
    shortName: 'vuecli',
    descriptiveName: {
        name: 'Vue CLI (https://cli.vuejs.org/)',
        value: 'vue-cli'
    },
    configUpdate: ({ cfg }) => cfg,
    preInit: ({ cwd, cfg, ci, packageManager }) => __awaiter(void 0, void 0, void 0, function* () {
        yield shell('npx', [
            ci ? '--yes' : '',
            '@vue/cli@latest',
            'create',
            cfg.appName,
            '-m',
            packageManager.name,
            ci ? '--default' : ''
        ], { cwd });
        yield shell('npx', [
            ci ? '--yes' : '',
            '@vue/cli',
            'add',
            'tauri',
            '--appName',
            cfg.appName,
            '--windowTitle',
            `${cfg.windowTitle}`
        ], {
            cwd: path.join(cwd, cfg.appName)
        });
        updatePackageJson((pkg) => {
            return Object.assign(Object.assign({}, pkg), { scripts: Object.assign(Object.assign({}, pkg.scripts), { 'tauri:build': 'vue-cli-service tauri:build', 'tauri:dev': 'vue-cli-service tauri:dev' }) });
        }, path.join(cwd, cfg.appName));
    }),
    postInit: ({ cfg, packageManager }) => __awaiter(void 0, void 0, void 0, function* () {
        console.log(`
    Your installation completed.

    $ cd ${cfg.appName}
    $ ${packageManager.name === 'npm' ? 'npm run' : packageManager.name} tauri:serve
    `);
        return yield Promise.resolve();
    })
};

// Copyright 2019-2021 Tauri Programme within The Commons Conservancy
const vanillajs = {
    shortName: 'vanillajs',
    descriptiveName: {
        name: 'Vanilla.js (html, css, and js without the bundlers)',
        value: 'Vanilla.js'
    },
    configUpdate: ({ cfg }) => (Object.assign(Object.assign({}, cfg), { distDir: `../dist`, devPath: `../dist`, beforeDevCommand: '', beforeBuildCommand: '', withGlobalTauri: true })),
    preInit: ({ cwd, cfg }) => __awaiter(void 0, void 0, void 0, function* () {
        const { appName } = cfg;
        const templateDir = path.join(__dirname, '../src/templates/vanilla');
        const variables = {
            name: appName
        };
        try {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call
            yield scaffe__default["default"].generate(templateDir, path.join(cwd, appName), {
                overwrite: true,
                variables
            });
        }
        catch (err) {
            console.log(err);
        }
    }),
    postInit: ({ cfg, packageManager }) => __awaiter(void 0, void 0, void 0, function* () {
        console.log(`
    Your installation completed.

    $ cd ${cfg.appName}
    $ ${packageManager.name} install
    $ ${packageManager.name === 'npm' ? 'npm run' : packageManager.name} tauri dev
    `);
        return yield Promise.resolve();
    })
};

// Copyright 2019-2021 Tauri Programme within The Commons Conservancy
const vite = {
    shortName: 'vite',
    descriptiveName: {
        name: 'create-vite (vanilla, vue, react, svelte, preact, lit) (https://vitejs.dev/guide/#scaffolding-your-first-vite-project)',
        value: 'create-vite'
    },
    configUpdate: ({ cfg, packageManager }) => (Object.assign(Object.assign({}, cfg), { distDir: `../dist`, devPath: 'http://localhost:5173', beforeDevCommand: `${packageManager.name === 'npm' ? 'npm run' : packageManager.name} dev`, beforeBuildCommand: `${packageManager.name === 'npm' ? 'npm run' : packageManager.name} build` })),
    extraQuestions: ({ ci }) => [
        {
            type: 'list',
            name: 'template',
            message: 'Which vite template would you like to use?',
            choices: [
                'vanilla',
                'vanilla-ts',
                'vue',
                'vue-ts',
                'react',
                'react-ts',
                'preact',
                'preact-ts',
                'lit-element',
                'lit-element-ts',
                'svelte',
                'svelte-ts'
            ],
            default: 'vue',
            loop: false,
            when: !ci
        }
    ],
    preInit: ({ cwd, cfg, packageManager, answers }) => __awaiter(void 0, void 0, void 0, function* () {
        var _a;
        const template = (_a = answers === null || answers === void 0 ? void 0 : answers.template) !== null && _a !== void 0 ? _a : 'vue';
        yield packageManager.create('vite', [cfg.appName, '--template', `${template}`], {
            cwd
        });
    }),
    postInit: ({ packageManager, cfg }) => __awaiter(void 0, void 0, void 0, function* () {
        console.log(`
    Your installation completed.

    $ cd ${cfg.appName}
    $ ${packageManager.name === 'npm' ? 'npm run' : packageManager.name} tauri dev
    `);
        return yield Promise.resolve();
    })
};

// Copyright 2019-2021 Tauri Programme within The Commons Conservancy
const dominator = {
    shortName: 'dominator',
    descriptiveName: {
        name: 'Dominator (https://crates.io/crates/dominator/)',
        value: 'Dominator'
    },
    configUpdate: ({ cfg, packageManager }) => (Object.assign(Object.assign({}, cfg), { distDir: `../dist`, devPath: 'http://localhost:10001/', beforeDevCommand: `${packageManager.name === 'npm' ? 'npm run' : packageManager.name} start`, beforeBuildCommand: `${packageManager.name === 'npm' ? 'npm run' : packageManager.name} build` })),
    preInit: ({ cwd, cfg }) => __awaiter(void 0, void 0, void 0, function* () {
        const { appName, windowTitle } = cfg;
        const templateDir = path.join(__dirname, '../src/templates/dominator');
        const variables = {
            name: appName,
            title: windowTitle
        };
        try {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call
            yield scaffe__default["default"].generate(templateDir, path.join(cwd, appName), {
                overwrite: true,
                variables
            });
        }
        catch (err) {
            console.log(err);
        }
    }),
    postInit: ({ cfg, packageManager }) => __awaiter(void 0, void 0, void 0, function* () {
        console.log(`
    Your installation completed.

    $ cd ${cfg.appName}
    $ ${packageManager.name} install
    $ ${packageManager.name === 'npm' ? 'npm run' : packageManager.name} tauri dev
    `);
        return yield Promise.resolve();
    })
};

const ngcli = {
    shortName: 'ngcli',
    descriptiveName: {
        name: 'Angular CLI (https://angular.io/cli)',
        value: 'ng-cli'
    },
    configUpdate: ({ cfg, packageManager }) => (Object.assign(Object.assign({}, cfg), { distDir: `../dist/${cfg.appName}`, devPath: 'http://localhost:4200', beforeDevCommand: `${packageManager.name === 'npm' ? 'npm run' : packageManager.name} start`, beforeBuildCommand: `${packageManager.name === 'npm' ? 'npm run' : packageManager.name} build` })),
    preInit: ({ cwd, cfg, packageManager, ci }) => __awaiter(void 0, void 0, void 0, function* () {
        yield shell('npx', [
            ci ? '--yes' : '',
            '-p',
            '@angular/cli',
            'ng',
            'new',
            cfg.appName,
            `--package-manager=${packageManager.name}`
        ], {
            cwd
        });
    }),
    postInit: ({ packageManager, cfg }) => __awaiter(void 0, void 0, void 0, function* () {
        console.log(`
    Your installation completed.

    $ cd ${cfg.appName}
    $ ${packageManager.name === 'npm' ? 'npm run' : packageManager.name} tauri dev
    `);
        return yield Promise.resolve();
    })
};

// Copyright 2019-2021 Tauri Programme within The Commons Conservancy
const svelte = {
    shortName: 'svelte',
    descriptiveName: {
        name: 'Svelte (https://github.com/sveltejs/template)',
        value: 'svelte'
    },
    extraQuestions: ({ ci }) => [
        {
            type: 'confirm',
            name: 'typescript',
            message: 'Enable Typescript?',
            default: true,
            loop: false,
            when: !ci
        }
    ],
    configUpdate: ({ cfg, packageManager }) => (Object.assign(Object.assign({}, cfg), { distDir: `../public`, devPath: 'http://localhost:8080', beforeDevCommand: `${packageManager.name === 'npm' ? 'npm run' : packageManager.name} dev`, beforeBuildCommand: `${packageManager.name === 'npm' ? 'npm run' : packageManager.name} build` })),
    preInit: ({ cwd, cfg, answers, ci }) => __awaiter(void 0, void 0, void 0, function* () {
        yield shell('npx', [ci ? '--yes' : '', 'degit', 'sveltejs/template', cfg.appName], {
            cwd
        });
        if (answers === null || answers === void 0 ? void 0 : answers.typescript) {
            yield shell('node', ['scripts/setupTypeScript.js'], {
                cwd: path.join(cwd, cfg.appName)
            });
        }
    }),
    postInit: ({ cfg, packageManager }) => __awaiter(void 0, void 0, void 0, function* () {
        console.log(`
    Your installation completed.

    $ cd ${cfg.appName}
    $ ${packageManager.name} install
    $ ${packageManager.name === 'npm' ? 'npm run' : packageManager.name} tauri dev
    `);
        return yield Promise.resolve();
    })
};

// Copyright 2019-2021 Tauri Programme within The Commons Conservancy
const solid = {
    shortName: 'solid',
    descriptiveName: {
        name: 'Solid (https://github.com/solidjs/templates)',
        value: 'solid'
    },
    extraQuestions: ({ ci }) => [
        {
            type: 'list',
            name: 'template',
            message: 'Which Solid template would you like to use?',
            choices: [
                'js-vitest',
                'js',
                'ts-bootstrap',
                'ts-minimal',
                'ts-router',
                'ts-sass',
                'ts-tailwindcss',
                'ts-unocss',
                'ts-uvu',
                'ts-vitest',
                'ts-windicss',
                'ts'
            ],
            default: 'ts',
            loop: false,
            when: !ci
        }
    ],
    configUpdate: ({ cfg, packageManager }) => (Object.assign(Object.assign({}, cfg), { distDir: `../dist`, devPath: 'http://localhost:3000', beforeDevCommand: `${packageManager.name === 'npm' ? 'npm run' : packageManager.name} dev`, beforeBuildCommand: `${packageManager.name === 'npm' ? 'npm run' : packageManager.name} build` })),
    preInit: ({ cwd, cfg, answers, ci }) => __awaiter(void 0, void 0, void 0, function* () {
        var _a;
        yield shell('npx', [
            ci ? '--yes' : '',
            'degit',
            `solidjs/templates/${(_a = answers === null || answers === void 0 ? void 0 : answers.template) !== null && _a !== void 0 ? _a : 'js'}`,
            cfg.appName
        ], { cwd });
    }),
    postInit: ({ cfg, packageManager }) => __awaiter(void 0, void 0, void 0, function* () {
        console.log(`
    Your installation completed.

    $ cd ${cfg.appName}
    $ ${packageManager.name} install
    $ ${packageManager.name === 'npm' ? 'npm run' : packageManager.name} tauri dev
    `);
        return yield Promise.resolve();
    })
};

// Copyright 2019-2021 Tauri Programme within The Commons Conservancy
const cljs = {
    shortName: 'cljs',
    descriptiveName: {
        name: 'ClojureScript (https://github.com/filipesilva/create-cljs-app)',
        value: 'cljs'
    },
    configUpdate: ({ cfg, packageManager }) => (Object.assign(Object.assign({}, cfg), { distDir: `../public`, devPath: 'http://localhost:3000', beforeDevCommand: `${packageManager.name === 'npm' ? 'npm run' : packageManager.name} start`, beforeBuildCommand: `${packageManager.name === 'npm' ? 'npm run' : packageManager.name} build` })),
    preInit: ({ cwd, cfg, packageManager }) => __awaiter(void 0, void 0, void 0, function* () {
        const npmLock = path.join(cwd, cfg.appName, 'package-lock.json');
        const yarnLock = path.join(cwd, cfg.appName, 'yarn.lock');
        const nodeModules = path.join(cwd, cfg.appName, 'node_modules');
        yield packageManager.create('cljs-app', [cfg.appName], { cwd });
        // `create-cljs-app` has both a `package-lock.json` and a `yarn.lock`
        // so it is better to remove conflicting lock files and install fresh node_modules
        emptyDir(nodeModules);
        switch (packageManager.name) {
            case 'yarn':
                if (fs.existsSync(npmLock))
                    fs.unlinkSync(npmLock);
                break;
            case 'npm':
                if (fs.existsSync(yarnLock))
                    fs.unlinkSync(yarnLock);
                break;
            case 'pnpm':
                if (fs.existsSync(npmLock))
                    fs.unlinkSync(npmLock);
                if (fs.existsSync(yarnLock))
                    fs.unlinkSync(yarnLock);
                break;
        }
        yield packageManager.install({ cwd: path.join(cwd, cfg.appName) });
    }),
    postInit: ({ cfg, packageManager }) => __awaiter(void 0, void 0, void 0, function* () {
        console.log(`
    Your installation completed.

    $ cd ${cfg.appName}
    $ ${packageManager.name === 'npm' ? 'npm run' : packageManager.name} tauri dev
    `);
        return yield Promise.resolve();
    })
};

// Copyright 2019-2021 Tauri Programme within The Commons Conservancy
function updateTauriConf(f, cwd = process.cwd()) {
    const tauriConfPath = path.join(cwd, 'src-tauri', 'tauri.conf.json');
    const tauriConf = JSON.parse(fs.readFileSync(tauriConfPath, 'utf8'));
    const output = f(tauriConf);
    fs.writeFileSync(tauriConfPath, JSON.stringify(output, undefined, 2));
}

/** Gets package manager info from a useragent string,usually from `process.env.npm_config_user_aagent` */
function getPkgManagerFromUA(userAgent) {
    if (!userAgent)
        return undefined;
    const pkgSpec = userAgent.split(' ')[0];
    const pkgSpecArr = pkgSpec.split('/');
    return {
        name: pkgSpecArr[0],
        version: pkgSpecArr[1]
    };
}
class Npm {
    constructor(version, options) {
        var _a, _b;
        this.name = 'npm';
        this.version = version;
        this.log = (_a = options === null || options === void 0 ? void 0 : options.log) !== null && _a !== void 0 ? _a : false;
        this.ci = (_b = options === null || options === void 0 ? void 0 : options.ci) !== null && _b !== void 0 ? _b : false;
    }
    install(options) {
        return __awaiter(this, void 0, void 0, function* () {
            yield shell('npm', ['install'], { cwd: options === null || options === void 0 ? void 0 : options.cwd });
        });
    }
    add(packages, options) {
        return __awaiter(this, void 0, void 0, function* () {
            yield shell('npm', ['install', (options === null || options === void 0 ? void 0 : options.dev) ? '--save-dev' : '', ...packages], { cwd: options === null || options === void 0 ? void 0 : options.cwd }, this.log);
        });
    }
    run(script, args, options) {
        return __awaiter(this, void 0, void 0, function* () {
            yield shell('npm', ['run', script, '--', ...args], { cwd: options === null || options === void 0 ? void 0 : options.cwd }, this.log);
        });
    }
    create(createApp, args, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.version >= 7) {
                yield shell('npm', ['init', `${createApp}@latest`, this.ci ? '--yes' : '', '--', ...args], {
                    cwd: options === null || options === void 0 ? void 0 : options.cwd
                }, this.log);
            }
            else {
                yield shell('npm', ['init', this.ci ? '--yes' : '', `${createApp}@latest`, ...args], { cwd: options === null || options === void 0 ? void 0 : options.cwd }, this.log);
            }
        });
    }
}
class Yarn {
    constructor(version, options) {
        var _a, _b;
        this.name = 'yarn';
        this.version = version;
        this.log = (_a = options === null || options === void 0 ? void 0 : options.log) !== null && _a !== void 0 ? _a : false;
        this.ci = (_b = options === null || options === void 0 ? void 0 : options.ci) !== null && _b !== void 0 ? _b : false;
    }
    install(options) {
        return __awaiter(this, void 0, void 0, function* () {
            yield shell('yarn', ['install'], { cwd: options === null || options === void 0 ? void 0 : options.cwd });
        });
    }
    add(packages, options) {
        return __awaiter(this, void 0, void 0, function* () {
            yield shell('yarn', ['add', (options === null || options === void 0 ? void 0 : options.dev) ? '-D' : '', ...packages], { cwd: options === null || options === void 0 ? void 0 : options.cwd }, this.log);
        });
    }
    run(script, args, options) {
        return __awaiter(this, void 0, void 0, function* () {
            yield shell('yarn', [script, ...args], { cwd: options === null || options === void 0 ? void 0 : options.cwd }, this.log);
        });
    }
    create(createApp, args, options) {
        return __awaiter(this, void 0, void 0, function* () {
            yield shell('yarn', [
                'create',
                this.ci ? '--non-interactive' : '',
                createApp,
                ...args
            ], {
                cwd: options === null || options === void 0 ? void 0 : options.cwd
            }, this.log);
        });
    }
}
class Pnpm {
    constructor(version, options) {
        var _a, _b;
        this.name = 'pnpm';
        this.version = version;
        this.log = (_a = options === null || options === void 0 ? void 0 : options.log) !== null && _a !== void 0 ? _a : false;
        this.ci = (_b = options === null || options === void 0 ? void 0 : options.ci) !== null && _b !== void 0 ? _b : false;
    }
    install(options) {
        return __awaiter(this, void 0, void 0, function* () {
            yield shell('pnpm', ['install'], { cwd: options === null || options === void 0 ? void 0 : options.cwd });
        });
    }
    add(packages, options) {
        return __awaiter(this, void 0, void 0, function* () {
            yield shell('pnpm', ['add', (options === null || options === void 0 ? void 0 : options.dev) ? '-D' : '', ...packages], { cwd: options === null || options === void 0 ? void 0 : options.cwd }, this.log);
        });
    }
    run(script, args, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.version >= 7) {
                yield shell('pnpm', [script, ...args], { cwd: options === null || options === void 0 ? void 0 : options.cwd }, this.log);
            }
            else {
                yield shell('pnpm', [script, '--', ...args], { cwd: options === null || options === void 0 ? void 0 : options.cwd }, this.log);
            }
        });
    }
    create(createApp, args, options) {
        return __awaiter(this, void 0, void 0, function* () {
            yield shell('pnpm', ['create', `${createApp}@latest`, '--', ...args], {
                cwd: options === null || options === void 0 ? void 0 : options.cwd
            }, this.log);
        });
    }
}

// Copyright 2019-2021 Tauri Programme within The Commons Conservancy
const allRecipes = [
    vanillajs,
    vite,
    cra,
    svelte,
    solid,
    vuecli,
    ngcli,
    dominator,
    cljs,
];
const recipeShortNames = allRecipes.map((r) => r.shortName);
const recipeDescriptiveNames = allRecipes.map((r) => r.descriptiveName);
const recipeByShortName = (name) => allRecipes.find((r) => r.shortName === name);
const recipeByDescriptiveName = (name) => allRecipes.find((r) => r.descriptiveName.value === name);
const createTauriApp = (cliArgs) => __awaiter(void 0, void 0, void 0, function* () {
    commander.program
        .description('Bootstrap a new tauri app from a "recipe" or a pre-built template.')
        .addOption(commander.createOption("-r, --recipe <recipe>", "Specify UI framework recipe").choices(recipeShortNames))
        .option("    --ci", "Skip prompts")
        .option("    --dev", "Use local development packages")
        .addOption(commander.createOption("-f, --force [option]", "Force init to overwrite")
        .choices(["conf", "template", "all"])
        .default("all"))
        .option("-d, --directory <path>", "Set target directory for init")
        .option("-A, --app-name <name>", "Name of your Tauri application")
        .option("-W, --window-title <title>", "Title of your Tauri application window")
        .option("-D, --dist-dir <path>", 'Web assets location, relative to "<project-dir>/src-tauri/tauri.conf.json"')
        .option("-p, --dev-path <path>", "Url of your dev server")
        .addOption(commander.createOption("-m, --manager <package-manager>", "Set package manager to use").choices(["npm", "yarn", "pnpm"]))
        .addOption(commander.createOption("-b, --binary <path>", "Use a prebuilt Tauri CLI binary"))
        .option("-l, --log", "Add log messages")
        .version(
    // eslint-disable-next-line
    require("../package.json").version, "-v, --version", "Displays create-tauri-app version")
        .helpOption("-h, --help", "Displays this message")
        .showHelpAfterError("For more information try --help")
        .configureHelp({
        optionTerm: (option) => chalk.cyan(option.flags),
        commandUsage: (command) => chalk.cyan(command.name()) + " [options]",
        commandDescription: (command) => chalk.yellow(command.description()),
    })
        .parse(process.argv);
    const argv = commander.program.opts();
    return yield runInit(argv);
});
const keypress = (skip) => __awaiter(void 0, void 0, void 0, function* () {
    if (skip)
        return;
    process.stdin.setRawMode(true);
    return yield new Promise((resolve, reject) => {
        console.log("Press any key to continue...");
        process.stdin.once("data", (data) => {
            const byteArray = [...data];
            if (byteArray.length > 0 && byteArray[0] === 3) {
                console.log("^C");
                process.exit(1);
            }
            process.stdin.setRawMode(false);
            resolve();
        });
    });
});
const runInit = (argv) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c, _d, _e, _f, _g;
    // prettier-ignore
    console.log(`
We hope to help you create something special with ${chalk.bold(chalk.yellow('Tauri'))}!
You will have a choice of one of the UI frameworks supported by the greater web tech community.
This tool should get you quickly started. See our docs at ${chalk.cyan('https://tauri.app/')}

If you haven't already, please take a moment to setup your system.
You may find the requirements here: ${chalk.cyan('https://tauri.app/v1/guides/getting-started/prerequisites')}
    `);
    yield keypress(argv.ci);
    // get package manager nfo
    const pmInfo = getPkgManagerFromUA(process.env.npm_config_user_agent);
    const pmName = (_b = (_a = argv.manager) !== null && _a !== void 0 ? _a : pmInfo === null || pmInfo === void 0 ? void 0 : pmInfo.name) !== null && _b !== void 0 ? _b : "npm";
    let pmVerStr;
    try {
        pmVerStr = (yield execa__default["default"](pmName, ["--version"])).stdout;
    }
    catch (_h) {
        throw new Error(`Must have ${pmName} installed to manage dependencies. Is it in your PATH? We tried running it inside ${process.cwd()}`);
    }
    const pmVer = parseInt(pmVerStr.split(".")[0]);
    const packageManager = pmName === "npm"
        ? new Npm(pmVer, { ci: argv.ci, log: argv.log })
        : pmName === "yarn"
            ? new Yarn(pmVer, { ci: argv.ci, log: argv.log })
            : pmName === "pnpm"
                ? new Pnpm(pmVer, { ci: argv.ci, log: argv.log })
                : null;
    if (!packageManager)
        throw new Error(`Unsupported package manager: ${pmName}`);
    const directory = (_c = argv.directory) !== null && _c !== void 0 ? _c : process.cwd();
    const defaults = {
        appName: "tauri-app",
        tauri: { window: { title: "Tauri App" } },
        recipeName: "Vanilla.js",
        installApi: true,
    };
    // prompt initial questions
    const answers = (yield inquirer__default["default"]
        .prompt([
        {
            type: "input",
            name: "appName",
            message: "What is your app name?",
            default: defaults.appName,
            when: !argv.ci && !argv.appName,
        },
        {
            type: "input",
            name: "tauri.window.title",
            message: "What should the window title be?",
            default: defaults.tauri.window.title,
            when: !argv.ci && !argv.windowTitle,
        },
        {
            type: "list",
            name: "recipeName",
            message: "What UI recipe would you like to add?",
            choices: recipeDescriptiveNames,
            default: defaults.recipeName,
            when: !argv.ci && !argv.recipe,
        },
    ])
        .catch(handlePromptsErr));
    const { appName, recipeName, installApi, tauri: { window: { title }, }, } = Object.assign(Object.assign({}, defaults), answers);
    const buildConfig = {
        distDir: argv.distDir,
        devPath: argv.devPath,
        appName: (_d = argv.appName) !== null && _d !== void 0 ? _d : appName,
        windowTitle: (_e = argv.windowTitle) !== null && _e !== void 0 ? _e : title,
    };
    let recipe;
    if (argv.recipe) {
        recipe = recipeByShortName(argv.recipe);
    }
    else if (recipeName !== undefined) {
        recipe = recipeByDescriptiveName(recipeName);
    }
    // throw if recipe is not set
    if (!recipe) {
        throw new Error("Could not find the recipe specified.");
    }
    // prompt for "@tauri-apps/api"
    // TODO: for vanillajs, maybe downlosd the package into "distDir"?
    if (recipe.shortName === "vanillajs") {
        defaults.installApi = false;
    }
    else {
        yield inquirer__default["default"]
            .prompt([
            {
                type: "confirm",
                name: "installApi",
                message: 'Add "@tauri-apps/api" npm package?',
                default: true,
                when: !argv.ci,
            },
        ])
            .catch(handlePromptsErr);
    }
    // prompt additional recipe questions
    let recipeAnswers;
    if (recipe.extraQuestions) {
        recipeAnswers = yield inquirer__default["default"]
            .prompt(recipe.extraQuestions({
            cfg: buildConfig,
            packageManager,
            ci: argv.ci,
            cwd: directory,
        }))
            .catch(handlePromptsErr);
    }
    let updatedConfig;
    if (recipe.configUpdate) {
        updatedConfig = recipe.configUpdate({
            cfg: buildConfig,
            packageManager,
            ci: argv.ci,
            cwd: directory,
            answers: recipeAnswers !== null && recipeAnswers !== void 0 ? recipeAnswers : {},
        });
    }
    const cfg = Object.assign(Object.assign({}, buildConfig), (updatedConfig !== null && updatedConfig !== void 0 ? updatedConfig : {}));
    // note that our app directory is reliant on the appName and
    // generally there are issues if the path has spaces (see Windows)
    // TODO: prevent app names with spaces or escape here?
    const appDirectory = path.join(directory, cfg.appName);
    if (recipe.preInit) {
        logStep("Running initial command(s)");
        yield recipe.preInit({
            cwd: directory,
            cfg,
            packageManager,
            ci: argv.ci,
            answers: recipeAnswers !== null && recipeAnswers !== void 0 ? recipeAnswers : {},
        });
    }
    // Vue CLI plugin automatically runs these
    if (recipe.shortName !== "vuecli") {
        logStep("Installing any additional needed dependencies");
        yield packageManager.add([
            installApi ? "@tauri-apps/api@latest" : "",
            ...((_f = recipe.extraNpmDependencies) !== null && _f !== void 0 ? _f : []),
        ], { cwd: appDirectory });
        yield packageManager.add(["@tauri-apps/cli@latest", ...((_g = recipe.extraNpmDevDependencies) !== null && _g !== void 0 ? _g : [])], { dev: true, cwd: appDirectory });
        logStep(`Updating ${chalk.reset(chalk.yellow('"package.json"'))}`);
        updatePackageJson((pkg) => {
            return Object.assign(Object.assign({}, pkg), { name: appName, scripts: Object.assign(Object.assign({}, pkg.scripts), { tauri: "tauri" }) });
        }, appDirectory);
        logStep(`Running ${chalk.reset(chalk.yellow('"tauri init"'))}`);
        // TODO: argv.binary
        const initArgs = [
            "init",
            "--app-name",
            cfg.appName,
            "--window-title",
            cfg.windowTitle,
            "--dist-dir",
            cfg.distDir,
            "--dev-path",
            cfg.devPath,
        ];
        yield packageManager.run("tauri", initArgs, { cwd: appDirectory });
        logStep(`Updating ${chalk.reset(chalk.yellow('"tauri.conf.json"'))}`);
        updateTauriConf((tauriConf) => {
            return Object.assign(Object.assign({}, tauriConf), { build: Object.assign(Object.assign({}, tauriConf.build), { beforeDevCommand: cfg.beforeDevCommand, beforeBuildCommand: cfg.beforeBuildCommand }) });
        }, appDirectory);
    }
    if (recipe.postInit) {
        logStep("Running final command(s)");
        yield recipe.postInit({
            cwd: appDirectory,
            cfg,
            packageManager,
            ci: argv.ci,
            answers: recipeAnswers !== null && recipeAnswers !== void 0 ? recipeAnswers : {},
        });
    }
});
function logStep(msg) {
    const out = `${chalk.green(">>")} ${chalk.bold(chalk.cyan(msg))}`;
    console.log(out);
}
function handlePromptsErr(error) {
    if (error.isTtyError) {
        console.warn("It appears your terminal does not support interactive prompts. Using default values.");
    }
    else {
        console.error("An unknown error occurred:", error);
    }
}

exports.createTauriApp = createTauriApp;
